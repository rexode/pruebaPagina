{"ast":null,"code":"\"use strict\";\n\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst names = [\"wei\", \"kwei\", \"mwei\", \"gwei\", \"szabo\", \"finney\", \"ether\"]; // Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\n\nexport function commify(value) {\n  const comps = String(value).split(\".\");\n\n  if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === \".\" || value === \"-.\") {\n    logger.throwArgumentError(\"invalid value\", \"value\", value);\n  } // Make sure we have at least one whole digit (0 if none)\n\n\n  let whole = comps[0];\n  let negative = \"\";\n\n  if (whole.substring(0, 1) === \"-\") {\n    negative = \"-\";\n    whole = whole.substring(1);\n  } // Make sure we have at least 1 whole digit with no leading zeros\n\n\n  while (whole.substring(0, 1) === \"0\") {\n    whole = whole.substring(1);\n  }\n\n  if (whole === \"\") {\n    whole = \"0\";\n  }\n\n  let suffix = \"\";\n\n  if (comps.length === 2) {\n    suffix = \".\" + (comps[1] || \"0\");\n  }\n\n  while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n    suffix = suffix.substring(0, suffix.length - 1);\n  }\n\n  const formatted = [];\n\n  while (whole.length) {\n    if (whole.length <= 3) {\n      formatted.unshift(whole);\n      break;\n    } else {\n      const index = whole.length - 3;\n      formatted.unshift(whole.substring(index));\n      whole = whole.substring(0, index);\n    }\n  }\n\n  return negative + formatted.join(\",\") + suffix;\n}\nexport function formatUnits(value, unitName) {\n  if (typeof unitName === \"string\") {\n    const index = names.indexOf(unitName);\n\n    if (index !== -1) {\n      unitName = 3 * index;\n    }\n  }\n\n  return formatFixed(value, unitName != null ? unitName : 18);\n}\nexport function parseUnits(value, unitName) {\n  if (typeof value !== \"string\") {\n    logger.throwArgumentError(\"value must be a string\", \"value\", value);\n  }\n\n  if (typeof unitName === \"string\") {\n    const index = names.indexOf(unitName);\n\n    if (index !== -1) {\n      unitName = 3 * index;\n    }\n  }\n\n  return parseFixed(value, unitName != null ? unitName : 18);\n}\nexport function formatEther(wei) {\n  return formatUnits(wei, 18);\n}\nexport function parseEther(ether) {\n  return parseUnits(ether, 18);\n}","map":{"version":3,"mappings":"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","names":["formatFixed","parseFixed","Logger","version","logger","names","commify","value","comps","String","split","length","match","throwArgumentError","whole","negative","substring","suffix","formatted","unshift","index","join","formatUnits","unitName","indexOf","parseUnits","formatEther","wei","parseEther","ether"],"sources":["C:\\Users\\santi\\Desktop\\pruebapagina\\node_modules\\@ethersproject\\units\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\r\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\nconst names = [\r\n    \"wei\",\r\n    \"kwei\",\r\n    \"mwei\",\r\n    \"gwei\",\r\n    \"szabo\",\r\n    \"finney\",\r\n    \"ether\",\r\n];\r\n\r\n\r\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\r\n// use them.\r\nexport function commify(value: string | number): string {\r\n    const comps = String(value).split(\".\");\r\n\r\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\r\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\r\n    }\r\n\r\n    // Make sure we have at least one whole digit (0 if none)\r\n    let whole = comps[0];\r\n\r\n    let negative = \"\";\r\n    if (whole.substring(0, 1) === \"-\") {\r\n        negative = \"-\";\r\n        whole = whole.substring(1);\r\n    }\r\n\r\n    // Make sure we have at least 1 whole digit with no leading zeros\r\n    while (whole.substring(0, 1) === \"0\") { whole = whole.substring(1); }\r\n    if (whole === \"\") { whole = \"0\"; }\r\n\r\n    let suffix = \"\";\r\n    if (comps.length === 2) { suffix = \".\" + (comps[1] || \"0\"); }\r\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\r\n        suffix = suffix.substring(0, suffix.length - 1);\r\n    }\r\n\r\n    const formatted = [];\r\n    while (whole.length) {\r\n        if (whole.length <= 3) {\r\n            formatted.unshift(whole);\r\n            break;\r\n        } else {\r\n            const index = whole.length - 3;\r\n            formatted.unshift(whole.substring(index));\r\n            whole = whole.substring(0, index);\r\n        }\r\n    }\r\n\r\n    return negative + formatted.join(\",\") + suffix;\r\n}\r\n\r\nexport function formatUnits(value: BigNumberish, unitName?: string | BigNumberish): string {\r\n    if (typeof(unitName) === \"string\") {\r\n        const index = names.indexOf(unitName);\r\n        if (index !== -1) { unitName = 3 * index; }\r\n    }\r\n    return formatFixed(value, (unitName != null) ? unitName: 18);\r\n}\r\n\r\nexport function parseUnits(value: string, unitName?: BigNumberish): BigNumber {\r\n    if (typeof(value) !== \"string\") {\r\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\r\n    }\r\n    if (typeof(unitName) === \"string\") {\r\n        const index = names.indexOf(unitName);\r\n        if (index !== -1) { unitName = 3 * index; }\r\n    }\r\n    return parseFixed(value, (unitName != null) ? unitName: 18);\r\n}\r\n\r\nexport function formatEther(wei: BigNumberish): string {\r\n    return formatUnits(wei, 18);\r\n}\r\n\r\nexport function parseEther(ether: string): BigNumber {\r\n    return parseUnits(ether, 18);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}